#!/usr/bin/perl

sub parseSignals($$) 
{
    my $txt = shift;
    my $arr = shift;

    my $n = 0;
    while ($txt =~ m/([^,]+)/gs) {
	my $nodes = $1;
	if ($nodes =~ m/([^\{\}\s\n,\[]+)([[]([0-9]+)(:([0-9]+))?[]])?/) {
	    my ($sig,$from,$to) = ($1,$3,$5);
	    if (defined($from)) {
		if (defined($to)) {
#	    print STDERR "$sig / $from / $to\n";
		    if ($from < $to) {
			for ($i = $from; $i <= $to; $i++) {
			    push @RES, "$sig\[$i\]";
			    $n++;
			}
		    } else {
			for ($i = $from; $i >= $to; $i--) {
			    push  @{$arr}, "$sig\[$i\]";
			    $n++;
			}
		    }
		} else {
		    push @{$arr}, "$sig\[$from\]";
		    $n++;
		}
	    } else {
		push @{$arr}, "$sig";
		$n++;
	    }
	}
    }
    return($n);
}

my $nAdded = 0;
sub parseFile($) 
{
    my $fn = shift;
    open(F, "<$fn");
    local $/ = undef;
    my $d = <F>;
    close(F);
    my $text = $d;

    while ($text =~ m/(.*)assign\s+([^;]+);(.*)/s) {
	my ($pre, $assign, $post) = ($1,$2,$3);
	my $newMid = "";
	while ($assign =~ m/(([\{][^=\}]+[\}]|\S+)\s*=\s*([\{][^=\}]+[\}]|\S+))\s*(,|$)/gs) {
	    my ($seg, $lh,$rh) = ($1,$2,$3);
	    my @RH;
	    my $nr = parseSignals($rh, \@RH);
	    my @LH;
	    my $nl = parseSignals($lh, \@LH);
	    if ($nr != $nl) {
		print STDERR "-E- SEG $seg\n   LH: $lh\n   RH: $rh\n";
		print STDERR "-E- $nl != $nr\n";
		for (my $i = 0; $i < @RH; $i++) {
		    print STDERR "RH\[$i\] = $RH[$i]\n";
		}
		for (my $i = 0; $i < @LH; $i++) {
		    print STDERR "LH\[$i\] = $LH[$i]\n";
		}
		exit(1);
	    }
	    $seg =~ s=\n=\n//=g;
	    $newMid .= "\n// $seg\n";
	    for (my $i = 0; $i < @RH; $i++) {
		$newMid .= "   buffer addedBuf$nAdded (.A($RH[$i]), .O($LH[$i]));\n";
		$nAdded++;
	    }
#	    print STDERR "$newMid\n";
	}
	$text = $pre . $newMid . $post;
    }
    print $text;
}

print $text;

foreach my $f (@ARGV) {
#    print STDERR "Parsing $f\n";
    parseFile($f);
}
